#端口映射
mixed-port: 7890
redir-port: 7891
tproxy-port: 1536
ipv6: true
mode: Rule
allow-lan: true
disable-keep-alive: true
experimental:
  http-headers:
    request:
      - name: "User-Agent"
        value: "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Mobile Safari/537.36"
      - name: "Accept-Language"
        value: "en-US,en;q=0.9"
unified-delay: true
tcp-concurrent: true
log-level: silent
find-process-mode: always
global-client-fingerprint: firefox
external-controller: 0.0.0.0:9090
external-ui: "./Web/Zash"
profile:
  store-selected: true
  store-fake-ip: true
  smart-collector-size: 1024

#域名嗅探模块

sniffer:
  enable: true
  force-dns-mapping: true
  parse-pure-ip: true
  override-destination: true
  sniff:
    HTTP:
      ports: [80, 443, 8080-8880]
    TLS:
      ports: [443, 5228, 8443]
    QUIC:
      ports: [443, 853, 784, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain: # 如遇需内部通信的应用请放行该域名
    - "Mijia Cloud"

tun:
  enable: true
  device: kers
  stack: mixed
  dns-hijack:
    - any:53
    - tcp://any:53
  udp-timeout: 300
  auto-route: true
  strict-route: true
  auto-redirect: false
  auto-detect-interface: true
  exclude-uid: [1000, 1001, 10116, 10117, 10125, 10177, 10206, 10249, 10312, 10388, 10417, 15001000, 15001001, 15010117, 15010206, 15010249, 15010388, 15010417]


dns:
  enable: true
  prefer-h3: true
  ipv6: true
  listen: 0.0.0.0:1053
  enhanced-mode: fake-ip
#  fake-ip-filter-mode: whitelist
  fake-ip-range: 172.20.0.1/16
  fake-ip-filter:
    - "RULE-SET:private_域"
    - "RULE-SET:GoogleFCM_域"
    - "RULE-SET:CN_域"
    - "RULE-SET:FS"
    - "RULE-SET:YM"
#使用个人自建私人 进行广告过滤和防追踪
  default-nameserver:
    - quic://94.140.14.14
    - quic://223.5.5.5:853
  nameserver:
    - quic://dns1.killove.cn:784
    - quic://dns2.killove.cn:784
    - quic://dns3.killove.cn:784
    - quic://dns4.killove.cn:784
    - quic://dns5.killove.cn:784
    - quic://dns6.killove.cn:784
# 锚点 - 节点类型筛选

#Dedicated/高速
Dedicated: &Dedicated "^(?=.*(专线|IPLC|IEPL|高速|三网|电信|移动|联通))(?!.*(CN|Private|中转|优化|家宽|原生|落地|新协议)).*$"

#Transit/优化
Transit: &Transit "^(?=.*(中转|优化|家宽|原生|落地|新协议))(?!.*(CN|Private|Dedicated|IPLC|IEPL|高速|三网|电信|移动|联通)).*$"

# ADHOME
Kers: &Kers "^(?=.*(Private)).*$"

#抓取节点
#cloudflare: &cloudflare "^(?=.*(cloudflare)).*$"
# 香港
Hong: &Hong "^(?=.*(🇭🇰|HK|Hong Kong|香港))(?!.*(专线|IPLC|IEPL|高速|三网|电信|移动|联通|中转|优化|家宽|原生|落地|新协议|Private|cloudflare|CN|cn)).*$"

# 日本
Japan: &Japan "^(?=.*(🇯🇵|JP|Japan|日本))(?!.*(专线|IPLC|IEPL|高速|三网|电信|移动|联通|中转|优化|家宽|原生|落地|新协议|Private|cloudflare|CN|cn)).*$"

# 美国
United: &United "^(?=.*(🇺🇸|US|United States|美国))(?!.*(专线|IPLC|IEPL|高速|三网|电信|移动|联通|中转|优化|家宽|原生|落地|新协议|Private|cloudflare|CN|cn)).*$"

# 台湾
Taiwan: &Taiwan "^(?=.*(🇨🇳|TW|Taiwan|台|新北|彰化))(?!.*(专线|IPLC|IEPL|高速|三网|电信|移动|联通|中转|优化|家宽|原生|落地|新协议|Private|cloudflare|CN|cn)).*$"

#新加坡
Lion: &Lion "^(?=.*(🇸🇬|SG|Singapore|新加坡|狮城))(?!.*(专线|IPLC|IEPL|高速|三网|电信|移动|联通|中转|优化|家宽|原生|落地|新协议|Private|cloudflare|CN|cn)).*$"

CN: &CN "^(?=.*(CN)).*$"
# 其他
Other: &Other "^(?!.*(🇭🇰|HK|Hong Kong|港|🇯🇵|JP|Japan|日本|🇺🇸|US|United States|美国|🇨🇳|TW|Taiwan|台|新北|彰化|🇸🇬|SG|Singapore|新加坡|狮城|专线|IPLC|IEPL|高速|三网|电信|移动|联通|中转|优化|家宽|原生|落地|新协议|Private|cloudflare|CN|cn)).*$"

#锚点组-以下配置更改会影响映射的所有代理组

#锚点-拉取订阅链接

p: &p
  type: http
  interval: 3600
  proxy: CNExports
  health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 300
  header:
      User-Agent:
        - "clash-verge/v2.2.3"

U-dns: &U-dns
  type: smart
  uselightgbm: true
#  collectdata: true
  strategy: sticky-sessions
  udp: true
  proxies:
    - Private
    - CNRoam
    - CNDirect
    - Dedicated
    - Transit
    - Country
#地区智能选择
U-smart: &U-smart
  type: smart
  uselightgbm: true
#  collectdata: true
  strategy: sticky-sessions
  udp: true
  include-all-providers: true

# 代理规则锚点

U-over: &U-over
  type: smart
  policy-priority: "(Dedicated|Transit):1.5"
  uselightgbm: true
#  collectdata: true
  strategy: sticky-sessions
  udp: true
  proxies:
    - Dedicated
    - Transit
    - Country

U-overCn: &U-overCn
  type: smart
  policy-priority: "CNRoam:1.5"
  uselightgbm: true
#  collectdata: true
  strategy: sticky-sessions
  udp: true
  proxies:
    - CNRoam
    - CNDirect

U-smartGlobal: &U-smartGlobal
  type: smart
  policy-priority: "(日本|台湾|新加坡):1.5"
  uselightgbm: true
#  collectdata: true
  strategy: sticky-sessions
  udp: true
  proxies:
    - 日本
    - 新加坡
    - 美国
    - 台湾
    - 香港
    - 其他

#订阅链接分区
proxy-providers:
  浮生若梦:
    <<: *p
    url: "https://c.killove.cn/hs"
    path: ./Subscribe/浮生若梦

proxies:
  - name: CNDirect
    type: direct
    udp: true

  - name: DNS_Hijack
    type: dns

# 代理组分区
proxy-groups:
  - name: DNS
    <<: *U-dns

  - name: BiliBili
    <<: *U-over

  - name: TikTok
    <<: *U-over

  - name: YouTube
    <<: *U-over

  - name: Google
    <<: *U-over

  - name: Steam
    <<: *U-over

  - name: Microsoft
    <<: *U-over

  - name: Netflix
    <<: *U-over

  - name: Apple
    <<: *U-over

  - name: Telegram
    <<: *U-over

  - name: GitHub
    <<: *U-over

  - name: OpenAI
    <<: *U-over

  - name: Twitter(X)
    <<: *U-over

  - name: Customized
    <<: *U-over

  - name: CNExports
    <<: *U-overCn

  #DNS独立分组

  - name: Private
    <<: *U-smart
    filter: *Kers

  # 自动选择策略
  - name: Dedicated
    <<: *U-smart
    filter: *Dedicated

  - name: Transit
    <<: *U-smart
    filter: *Transit

  - name: 香港
    <<: *U-smart
    filter: *Hong

  - name: 日本
    <<: *U-smart
    filter: *Japan

  - name: 美国
    <<: *U-smart
    filter: *United

  - name: 台湾
    <<: *U-smart
    filter: *Taiwan

  - name: 新加坡
    <<: *U-smart
    filter: *Lion

  - name: Country
    <<: *U-smartGlobal
    filter: *Other

  - name: CNRoam
    url: http://connect.rom.miui.com/generate_204
    <<: *U-smart
    filter: *CN

  - name: 其他
    <<: *U-smart
    filter: *Other

#规则
rule-anchor:
  Local: &Local
    {type: file, behavior: classical, format: text}
  Classical: &Classical
    {type: http, behavior: classical, format: text, interval: 86400}
  IPCIDR: &IPCIDR
    {type: http, behavior: ipcidr, format: mrs, interval: 86400}
  Domain: &Domain
    {type: http, behavior: domain, format: mrs, interval: 86400}

rule-providers:

  FS: # 用于fake IP过滤
    <<: *Classical
    url: "https://raw.githubusercontent.com/kers701/rule/main/rules/FS"
    path: ./rules/FS

  DNS: 
    <<: *Classical
    url: "https://raw.githubusercontent.com/kers701/rule/main/rules/dns"
    path: ./rules/dns

  DNS_IP: 
    <<: *Classical
    url: "https://raw.githubusercontent.com/kers701/rule/main/rules/dnsip"
    path: ./rules/dnsip

  YM: #自定义避免某些需要直连的链接被代理或拦截
    <<: *Classical
    url: "https://raw.githubusercontent.com/kers701/rule/main/rules/YM"
    path: ./rules/YM

  YM_IP: 
    <<: *Classical
    url: "https://raw.githubusercontent.com/kers701/rule/main/rules/YMip"
    path: ./rules/YMip

  Customized:
    <<: *Classical
    url: "https://raw.githubusercontent.com/kers701/rule/main/rules/C"
    path: ./rules/C

  Customized_IP:
    <<: *Classical
    url: "https://raw.githubusercontent.com/kers701/rule/main/rules/Cip"
    path: ./rules/Cip

  WebRTC_端/域:
    <<: *Classical
    path: ./rules/rct.list
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/Surfing@rm/Home/rules/WebRTC.list"

  TikTok_域:
    <<: *Domain
    path: ./rules/TikTok.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/TikTok/TikTok_OCD_Domain.mrs"

  BiliBili_域:
    <<: *Domain
    path: ./rules/BiliBili.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/BiliBili/BiliBili_OCD_Domain.mrs"
  BiliBili_IP:
    <<: *IPCIDR
    path: ./rules/BiliBili_IP.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/BiliBili/BiliBili_OCD_IP.mrs"

  CN_IP:
    <<: *IPCIDR
    path : ./rules/cnp.mrs
    url: "https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/cn.mrs"
  CN_域:
    <<: *Domain
    path : ./rules/cny.mrs
    url: "https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/cn.mrs"

  No-ads-all_域:
    <<: *Domain
    path : ./rules/adsy.mrs
    url: "https://anti-ad.net/mihomo.mrs"

  Steam_域:
    <<: *Domain
    path : ./rules/steamy.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Steam/Steam_OCD_Domain.mrs"

  Telegram_域:
    <<: *Domain
    path : ./rules/telegramy.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Telegram/Telegram_OCD_Domain.mrs"
  Telegram_IP:
    <<: *IPCIDR
    path : ./rules/telegramp.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Telegram/Telegram_OCD_IP.mrs"

  YouTube_域:
    <<: *Domain
    path : ./rules/youtubey.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/YouTube/YouTube_OCD_Domain.mrs"
  YouTube_IP:
    <<: *IPCIDR
    path : ./rules/youtubep.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/YouTube/YouTube_OCD_IP.mrs"

  Google_域:
    <<: *Domain
    path : ./rules/googley.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Google/Google_OCD_Domain.mrs"
  Google_IP:
    <<: *IPCIDR
    path : ./rules/googlep.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Google/Google_OCD_IP.mrs"

  GoogleFCM_域:
    <<: *Domain
    path : ./rules/fcmy.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/GoogleFCM/GoogleFCM_OCD_Domain.mrs"
  GoogleFCM_IP:
    <<: *IPCIDR
    path : ./rules/fcmp.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/GoogleFCM/GoogleFCM_OCD_IP.mrs"

  Microsoft_域:
    <<: *Domain
    path : ./rules/microsofty.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Microsoft/Microsoft_OCD_Domain.mrs"

  Apple_域:
    <<: *Domain
    path : ./rules/appley.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Apple/Apple_OCD_Domain.mrs"
  Apple_IP:
    <<: *IPCIDR
    path : ./rules/appleip.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Apple/Apple_OCD_IP.mrs"

  OpenAI_域:
    <<: *Domain
    path : ./rules/openaiy.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/OpenAI/OpenAI_OCD_Domain.mrs"
  OpenAI_IP:
    <<: *IPCIDR
    path : ./rules/openaip.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/OpenAI/OpenAI_OCD_IP.mrs"

  Netflix_域:
    <<: *Domain
    path : ./rules/netflixy.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Netflix/Netflix_OCD_Domain.mrs"
  Netflix_IP:
    <<: *IPCIDR
    path : ./rules/netflixp.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Netflix/Netflix_OCD_IP.mrs"

  GitHub_域:
    <<: *Domain
    path : ./rules/githuby.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/GitHub/GitHub_OCD_Domain.mrs"

  Twitter_域:
    <<: *Domain
    path : ./rules/twittery.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Twitter/Twitter_OCD_Domain.mrs"
  Twitter_IP:
    <<: *IPCIDR
    path : ./rules/twitterp.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Twitter/Twitter_OCD_IP.mrs"
  
  private_域:
    <<: *Domain
    path : ./rules/privatey.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Lan/Lan_OCD_Domain.mrs"
  private_IP:
    <<: *IPCIDR
    path : ./rules/privatep.mrs
    url: "https://cdn.jsdelivr.net/gh/GitMetaio/rule@master/rule/Clash/Lan/Lan_OCD_IP.mrs"

rules:
  - OR,((DST-PORT,53),(DST-PORT,853)),DNS_Hijack

  - OR,((RULE-SET,DNS),(RULE-SET,DNS_IP,no-resolve)),DNS

  # 优先直连网站(自定义避免某些需要直连的链接被代理或拦截)
  - OR,((RULE-SET,YM),(RULE-SET,YM_IP,no-resolve)),CNExports

  # 优先代理网站(自定义避免某些需要代理的链接被拦截)
  - OR,((RULE-SET,Customized),(RULE-SET,Customized_IP,no-resolve)),Customized

  # 广告拦截用于处理DNS未拦截的广告
  - OR,((RULE-SET,No-ads-all_域),(RULE-SET,WebRTC_端/域)),REJECT-DROP

  # 组合规则

  - OR,((PROCESS-PATH,tv.danmaku.bili),(RULE-SET,BiliBili_域),(RULE-SET,BiliBili_IP,no-resolve)),BiliBili

  - OR,((RULE-SET,YouTube_域),(RULE-SET,YouTube_IP,no-resolve)),YouTube

  - OR,((RULE-SET,Netflix_域),(RULE-SET,Netflix_IP,no-resolve)),Netflix

  - OR,((RULE-SET,Telegram_域),(RULE-SET,Telegram_IP,no-resolve)),Telegram

  - OR,((RULE-SET,Twitter_域),(RULE-SET,Twitter_IP,no-resolve)),Twitter(X)

  - OR,((RULE-SET,Apple_域),(RULE-SET,Apple_IP,no-resolve)),Apple

  - OR,((RULE-SET,OpenAI_域),(RULE-SET,OpenAI_IP,no-resolve)),OpenAI

  - OR,((RULE-SET,Google_域),(DOMAIN-KEYWORD,mtalk.google),(RULE-SET,GoogleFCM_域),(RULE-SET,Google_IP,no-resolve),(RULE-SET,GoogleFCM_IP,no-resolve)),Google
  
  #直连域名匹配

  - OR,((RULE-SET,CN_域),(RULE-SET,CN_IP),(RULE-SET,private_域),(RULE-SET,private_IP,no-resolve)),CNExports

  # 单一规则

  - RULE-SET,GitHub_域,GitHub
  - RULE-SET,Microsoft_域,Microsoft
  - RULE-SET,Steam_域,Steam
  - RULE-SET,TikTok_域,TikTok

  #兜底
  - MATCH,Customized